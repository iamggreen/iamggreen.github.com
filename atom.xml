<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iamggreen's Blog]]></title>
  <link href="http://www.iamggreen.com/atom.xml" rel="self"/>
  <link href="http://www.iamggreen.com/"/>
  <updated>2014-01-15T22:10:47-06:00</updated>
  <id>http://www.iamggreen.com/</id>
  <author>
    <name><![CDATA[Gary Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS Declaration Precedence]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/15/css-stylesheet-precedence/"/>
    <updated>2014-01-15T21:48:54-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/15/css-stylesheet-precedence</id>
    <content type="html"><![CDATA[<p>The W3 Specifications on CSS 2.1 say what the CSS Declaration Precedence order but I found it harder to track down what each type of declaration actually is.  This is the definitions in order.</p>

<p><strong>CSS Declaration Precedence Order </strong> (#5 has the highest precedence)</p>

<ol>
<li><p><strong>User Agent Declarations</strong></p>

<p>These are the default declarations added by the browser</p></li>
<li><p><strong>User Normal Declarations</strong></p>

<p>These are the declarations specified by the user in the browser that override the user agent declarations.  Usually in the browser settings/options tabs.</p></li>
<li><p><strong>Author Normal Declarations</strong></p>

<p>These are declarations used by a particular web page.</p></li>
<li><p><strong>Author Important Declarations</strong>
Same as Author Normal declarations but with !important added</p></li>
<li><p><strong>User Important Declarations</strong>
Same as User Normal declarations but with !important added</p></li>
</ol>


<p>References</p>

<p><a href="http://webdesign.about.com/od/css/f/blcssfaqdifusau.htm">What is the difference between a user and an author style sheet?</a></p>

<p><a href="http://www.w3.org/TR/CSS21/cascade.html#cascading-order">CSS Cascading order</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Text Search]]></title>
    <link href="http://www.iamggreen.com/blog/2013/12/28/full-text-search/"/>
    <updated>2013-12-28T00:00:00-06:00</updated>
    <id>http://www.iamggreen.com/blog/2013/12/28/full-text-search</id>
    <content type="html"><![CDATA[<p>Since I have never had a project that requires full text document search I haven&rsquo;t thought much about how it&rsquo;s done.  After reading an assignment from the MIT OpenCourseware course Software Engineering for Web Applications  I think I have a much better understanding of how it is done and from the reading this would be how I would approach it.</p>

<p>Let&rsquo;s take for example a database of movies.</p>

<p><strong>To insert a movie into our database:</strong></p>

<ol>
<li><p>Remove stopwords.  These are all words that occur too often to be useful as a search word.  Examples are: &ldquo;a&rdquo;, &ldquo;and&rdquo;, &ldquo;as&rdquo;, &ldquo;at&rdquo;, &ldquo;for&rdquo;, &ldquo;or&rdquo;, &ldquo;the&rdquo;, etc.  When building a full-text search for a particular domain I believe there may be additional domain-specific stopwords as well.</p></li>
<li><p>Normalize words.  When a user searches for the word &ldquo;worried&rdquo;, we should probably include the words &ldquo;worries&rdquo;, &ldquo;worry&rdquo;.  So we would normalize that to &ldquo;worry&rdquo;.</p></li>
<li><p>Normalize synonyms.  This is probably optional since it is harder to determine what context a word is used in.  If we used the word &ldquo;like&rdquo; as an adjective then we could also search for the words &ldquo;alike&rdquo;, &ldquo;comparable&rdquo;, etc..  But if it&rsquo;s a verb similar words would be &ldquo;enjoy&rdquo; or &ldquo;admire&rdquo;.</p></li>
<li><p>Store each word along with its frequency in a database</p></li>
</ol>


<p><strong>To query a movie from our database:</strong></p>

<ol>
<li><p>Do the same steps 1-3 that we did when we inserted the movie into our database.  Remove stopwords, normalize words and normalize synonyms.</p></li>
<li><p>Perform the query of the database.  Find the entries and sort by those with the greatest number of word matches followed by the words used most frequently.</p></li>
</ol>


<p>Now this is just a very basic full-text search.  I can think of some optimizations to be made.</p>

<ol>
<li><p>Dynamically determine stopwords.  Prior to rebuilding the search database analysis could be done beforehand to determine stopwords instead of having a static list of words.  So if i built a database to search words for a computer sales website I may find that the word &ldquo;computer&rdquo; shows up in 90% of the documents so I might add that as a stopword since it&rsquo;s not helpful.</p></li>
<li><p>Tune the rankings.  Give certain matches different weights based on meeting different criteria.  Matching all words, matching words in order, matching words before normalizing, word frequency.  We could tune our search result rankings by changing how much those criteria matter and determine if that gives us better search results.</p></li>
</ol>


<p>References</p>

<p>MIT OpenCourseware &ndash; Software Engineering for Web Applications &ndash; <a href="http://philip.greenspun.com/seia/search">Search Assignment</a></p>

<p>MIT OpenCourseware &ndash; <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-171-software-engineering-for-web-applications-fall-2003/index.htm">Software Engineering for Web Applications</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebHooks Debugger]]></title>
    <link href="http://www.iamggreen.com/blog/2011/12/18/webhooks-debugger/"/>
    <updated>2011-12-18T00:00:00-06:00</updated>
    <id>http://www.iamggreen.com/blog/2011/12/18/webhooks-debugger</id>
    <content type="html"><![CDATA[<p>I’ve been reading a lot about <a href="http://www.webhooks.org/">WebHooks</a> lately and I’m very intrigued.  It’s a simple idea, basically just an event call over http.  It’s a push model.  You register a url with another application, and when something happens in that application, it does an HTTP post with the information.  So, the idea is simple to grasp but it can do some powerful things.  For example, this WordPress blog has a way to register url’s to call when a new post is added.  I can create a page for it to post to, and then have an e-mail sent to me, post notifications to my favorite social network, or whatever you can dream up.  We aren’t limited to notification either, we can also create composite calls that act on the data sent to it, same idea as XML-RPC.</p>

<p>I came across <a href="http://www.postbin.org/">PostBin</a> which is a WebHook debugger.  You can create a bin and have you application do an HTTP POST to it, and it will store the headers and body data for you.  It has it’s limitations, like being throttled by Google Apps for both data size and bandwidth, it only worked for me about half the time.  I decided to create a <a href="http://www.postbin.org/">PostBin</a> type application for my own purposes.  The functionality is the same as <a href="http://www.postbin.org/">PostBin</a> but instead of having to manually create the bins, mine are automatically created by posting to the url.  Since it’s not a full fledge application, it doesn’t have the security or data limitations.  I’ll put that in for later versions if it gets overused and abused.</p>

<p>Sample application is available at <a href="http://apps.iamggreen.com/postbin">http://apps.iamggreen.com/postbin</a></p>

<p>Source code is available at <a href="https://github.com/iamggreen/PostBinDebugger">https://github.com/iamggreen/PostBinDebugger</a></p>
]]></content>
  </entry>
  
</feed>
