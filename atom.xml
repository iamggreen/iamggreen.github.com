<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iamggreen's Blog]]></title>
  <link href="http://www.iamggreen.com/atom.xml" rel="self"/>
  <link href="http://www.iamggreen.com/"/>
  <updated>2014-01-19T13:00:17-06:00</updated>
  <id>http://www.iamggreen.com/</id>
  <author>
    <name><![CDATA[Gary Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OWASP Top 10 for 2013]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/19/owasp-top-10-for-2013/"/>
    <updated>2014-01-19T08:37:48-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/19/owasp-top-10-for-2013</id>
    <content type="html"><![CDATA[<p>OWASP is the Open Web Application Security Project.  The OWASP Top Ten project contains the top 10 security vulnerabilities for web applications.  Every year they publish this list.  Below is the top 10 vulnerabilities of 2013.</p>

<ol>
<li><p><strong>Injection</strong></p>

<p>This is any kind of untrusted data sent to a web application without validation.  SQL Injection is a big one but also consider script injection.  To protect against this use bind variables for SQL and avoid dynamic SQL statements.  Also, validate all data coming from user forms/requests.  Script injection is harmful particularly is it is data coming from the user and being displayed to other&rsquo;s on the browser.  If not properly escaped it can contain scripts that do malicious activities.</p>

<hr /></li>
<li><p><strong>Broken Authentication and Session Management</strong></p>

<p>Building custom authentication and session management is hard.  Doing it wrong could leave your application open to allowing intruders access to accounts and user information.  The recommendation is to use tried and true methods and shy away from custom techniques.</p>

<hr /></li>
<li><p><strong>Cross-Site Scripting (XSS)</strong></p>

<p>XSS and Injection go hand in hand.  This is the most prevalent web application security flaw.  XSS occurs when an application includes user supplied data in a page sent to the browser without properly validating or escaping that content.  The types of XSS flaws are 1) Stored, 2) Reflected, and 3) DOM based XSS</p>

<hr /></li>
<li><p><strong>Insecure Direct Object References</strong></p>

<p>This type of flaw occurs when a user, usually an authorized system user, changes a parameter that directly refers to a system object to another object the user isn&rsquo;t authorized for.  The application assumes that since the user is authorized they are not also an attacker.  The best way to prevent this is to check access on a per object bases, or use per user or session indirect object references.</p>

<hr /></li>
<li><p><strong>Security Misconfiguration</strong></p>

<p>This can happen at any level of an application stack including this platform, web server, application server, database, and custom code.  Having an automated repeatable hardening process for servers can help with server misconfiguration.  Also, keep up to date with software updates and patches and run scans and audits periodically.  Also, have a strong application architecture that provides effective, secure separate between components.</p>

<hr /></li>
<li><p><strong>Sensitive Data Exposure</strong></p>

<p>This happens when an attacker accesses sensitive data at rest, in transit, or in customer browsers.  Usually the result of not encrypting sensitive data.  Also can happen due to choosing weak key generation, management, or algorithm techniques.</p>

<hr /></li>
<li><p><strong>Missing Function Level Access Control</strong></p>

<p>This is the result of not authenticating users and not protecting privileged data.  Sometimes developers try to leverage security by obscurity and believe that if there are no direct links to a page, they do not need to secure them.</p>

<hr /></li>
<li><p><strong>Cross-Site Request Forgery (CSRF)</strong></p>

<p>This happens when an attacker creates a forged HTTP request and tricks a victim into submitting them via image tags, XSS, or numerous other techniques.  If the user is authenticated the attack will succeed.  This attack takes advantage of the predictable nature of an http action&rsquo;s parameters and the fact that a browser sends cookie credentials automatically with a  request.  To prevent a CSRF, it requires the inclusion of an unpredictable token in each HTTP request.  This should be unique per session at a minimum.  This token can be included as a hidden field in the page.</p>

<hr /></li>
<li><p><strong>Using Components with Known Vulnerabilities</strong></p>

<p>This happens when vulnerable components are used and exploited. The vulnerability could be new or it could be old and the components/libraries used are simply not up to date. To protect against this, identify all components used along with versions, monitor the security of these components publicly.  Also, establish security policies governing these components uses and consider adding security wrappers around the components.</p>

<hr /></li>
<li><p><strong>Unvalidated Redirects and Forwards</strong></p></li>
</ol>


<p>   This type of attack happens with an attacker tricks a user into submitting a request to your website.  The attacker links to invalidated redirects and tricks the victim into clicking it.  Since the link is to a trusted domain the user is more likely to trust the page they are being redirected to.  This could be the attacker&rsquo;s page asking for credentials from your site.  To prevent this type of attack, either do not use redirects and forwards or do not involve user parameters in determining the destination.  At a minimum ensure the supplied url parameter is valid and authorized for the user, preferably using a mapping value rather than a url.</p>

<hr />

<p> <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP Top Ten Project</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyframe Animations]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/18/keyframe-animations/"/>
    <updated>2014-01-18T11:27:15-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/18/keyframe-animations</id>
    <content type="html"><![CDATA[<p>CSS3 defines a property called keyframes in order to allow animation to be done via CSS.  While this works in most up-to-date browsers (Chrome, IE9+, Mozilla, Opera) they all require vendor prefixes to work as the standard properties do not currently work on any browser.  All animation properties as well as the @keyframe declaration must have a vendor prefix to work.  The vendor prefixes have been left of in this article for brevity.</p>

<p>To start, we need to create a keyframe animation.  It looks something like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@keyframes sunrise {
</span><span class='line'>        0% {
</span><span class='line'>                bottom: 0;
</span><span class='line'>                left: 340px;
</span><span class='line'>                background: #f00;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        33% {
</span><span class='line'>                bottom: 340px;
</span><span class='line'>                left: 340px;
</span><span class='line'>                background: #ffd630;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        66% {
</span><span class='line'>                bottom: 340px;
</span><span class='line'>                left: 40px;
</span><span class='line'>                background: #ffd630;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        100% {
</span><span class='line'>                bottom: 0;
</span><span class='line'>                left: 40px;
</span><span class='line'>                background: #f00;
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is pretty self explanatory.  It creates an animation named &ldquo;sunrise&rdquo;.  The percentages define where the transitions need to be at the time interval for that percent.  0% and 100% are where the transition starts and ends. Also, to/from property names can be used interchangeably with 0%/100%, respectively.</p>

<p>Now we need to assign that keyframe animation to a given element of set of elements based on a css selector.  It looks like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#sun.animate {
</span><span class='line'>        animation-name: sunrise;
</span><span class='line'>        animation-duration: 10s;
</span><span class='line'>        animation-timing-function: ease;
</span><span class='line'>        animation-iteration-count: 1;
</span><span class='line'>        animation-direction: normal;
</span><span class='line'>        animation-delay: 0;
</span><span class='line'>        animation-play-state: running;
</span><span class='line'>        animation-fill-mode: forwards;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The properties are:</p>

<ul>
<li><strong>animation-name</strong>  &ndash; Specifies the name of the keyframe you want to bind to the selector</li>
</ul>


<hr />

<ul>
<li><strong>animation-duration</strong> &ndash; Specifies how many seconds or milliseconds an animation takes to complete</li>
</ul>


<hr />

<ul>
<li><strong>animation-timing-function</strong> &ndash; Specifies the speed curve of the animation

<ul>
<li>Allowed values are ease(default), linear, ease-in, ease-out, ease-in-out, cubic-bezier(Dont ask, no clue?!?!)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><strong>animation-iteration-count</strong> &ndash; Specifies how many times an animation should be played</li>
</ul>


<hr />

<ul>
<li><strong>animation-direction</strong> Specifies whether or not the animation should play in reverse on alternate cycles

<ul>
<li>Allowed values are normal(default), reverse, alternate, alternate-reverse</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><strong>animation-delay</strong> &ndash; Specifies a delay before the animation will start</li>
</ul>


<hr />

<ul>
<li><strong>animation-play-state</strong> Specifies whether the animation is running or paused

<ul>
<li>Allowed values are running(default), paused</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><strong>animation-fill-mode</strong> Specifies what values are applied by the animation outside the time it is executing

<ul>
<li>Allowed values are none(default), forwards, backwards, both</li>
</ul>
</li>
</ul>


<hr />

<p>And that&rsquo;s most of what you need to start playing with animations in CSS.  Some of the pages I put together for my learning are below.  Have fun!</p>

<p><a href="https://github.com/iamggreen/KeyFramesHelloWorld">KeyFrameHelloWorld on GitHub</a></p>

<p><a href="http://jsfiddle.net/iamggreen/e7YPB/1/">Keyframe Orbits JSFiddle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Declaration Precedence]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/15/css-stylesheet-precedence/"/>
    <updated>2014-01-15T21:48:54-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/15/css-stylesheet-precedence</id>
    <content type="html"><![CDATA[<p>The W3 Specifications on CSS 2.1 say what the CSS Declaration Precedence order but I found it harder to track down what each type of declaration actually is.  This is the definitions in order.</p>

<p><strong>CSS Declaration Precedence Order </strong> (#5 has the highest precedence)</p>

<ol>
<li><p><strong>User Agent Declarations</strong></p>

<p>These are the default declarations added by the browser</p></li>
<li><p><strong>User Normal Declarations</strong></p>

<p>These are the declarations specified by the user in the browser that override the user agent declarations.  Usually in the browser settings/options tabs.</p></li>
<li><p><strong>Author Normal Declarations</strong></p>

<p>These are declarations used by a particular web page.</p></li>
<li><p><strong>Author Important Declarations</strong>
Same as Author Normal declarations but with !important added</p></li>
<li><p><strong>User Important Declarations</strong>
Same as User Normal declarations but with !important added</p></li>
</ol>


<p>References</p>

<p><a href="http://webdesign.about.com/od/css/f/blcssfaqdifusau.htm">What is the difference between a user and an author style sheet?</a></p>

<p><a href="http://www.w3.org/TR/CSS21/cascade.html#cascading-order">CSS Cascading order</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Text Search]]></title>
    <link href="http://www.iamggreen.com/blog/2013/12/28/full-text-search/"/>
    <updated>2013-12-28T00:00:00-06:00</updated>
    <id>http://www.iamggreen.com/blog/2013/12/28/full-text-search</id>
    <content type="html"><![CDATA[<p>Since I have never had a project that requires full text document search I haven&rsquo;t thought much about how it&rsquo;s done.  After reading an assignment from the MIT OpenCourseware course Software Engineering for Web Applications  I think I have a much better understanding of how it is done and from the reading this would be how I would approach it.</p>

<p>Let&rsquo;s take for example a database of movies.</p>

<p><strong>To insert a movie into our database:</strong></p>

<ol>
<li><p>Remove stopwords.  These are all words that occur too often to be useful as a search word.  Examples are: &ldquo;a&rdquo;, &ldquo;and&rdquo;, &ldquo;as&rdquo;, &ldquo;at&rdquo;, &ldquo;for&rdquo;, &ldquo;or&rdquo;, &ldquo;the&rdquo;, etc.  When building a full-text search for a particular domain I believe there may be additional domain-specific stopwords as well.</p></li>
<li><p>Normalize words.  When a user searches for the word &ldquo;worried&rdquo;, we should probably include the words &ldquo;worries&rdquo;, &ldquo;worry&rdquo;.  So we would normalize that to &ldquo;worry&rdquo;.</p></li>
<li><p>Normalize synonyms.  This is probably optional since it is harder to determine what context a word is used in.  If we used the word &ldquo;like&rdquo; as an adjective then we could also search for the words &ldquo;alike&rdquo;, &ldquo;comparable&rdquo;, etc..  But if it&rsquo;s a verb similar words would be &ldquo;enjoy&rdquo; or &ldquo;admire&rdquo;.</p></li>
<li><p>Store each word along with its frequency in a database</p></li>
</ol>


<p><strong>To query a movie from our database:</strong></p>

<ol>
<li><p>Do the same steps 1-3 that we did when we inserted the movie into our database.  Remove stopwords, normalize words and normalize synonyms.</p></li>
<li><p>Perform the query of the database.  Find the entries and sort by those with the greatest number of word matches followed by the words used most frequently.</p></li>
</ol>


<p>Now this is just a very basic full-text search.  I can think of some optimizations to be made.</p>

<ol>
<li><p>Dynamically determine stopwords.  Prior to rebuilding the search database analysis could be done beforehand to determine stopwords instead of having a static list of words.  So if i built a database to search words for a computer sales website I may find that the word &ldquo;computer&rdquo; shows up in 90% of the documents so I might add that as a stopword since it&rsquo;s not helpful.</p></li>
<li><p>Tune the rankings.  Give certain matches different weights based on meeting different criteria.  Matching all words, matching words in order, matching words before normalizing, word frequency.  We could tune our search result rankings by changing how much those criteria matter and determine if that gives us better search results.</p></li>
</ol>


<p>References</p>

<p>MIT OpenCourseware &ndash; Software Engineering for Web Applications &ndash; <a href="http://philip.greenspun.com/seia/search">Search Assignment</a></p>

<p>MIT OpenCourseware &ndash; <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-171-software-engineering-for-web-applications-fall-2003/index.htm">Software Engineering for Web Applications</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebHooks Debugger]]></title>
    <link href="http://www.iamggreen.com/blog/2011/12/18/webhooks-debugger/"/>
    <updated>2011-12-18T00:00:00-06:00</updated>
    <id>http://www.iamggreen.com/blog/2011/12/18/webhooks-debugger</id>
    <content type="html"><![CDATA[<p>I’ve been reading a lot about <a href="http://www.webhooks.org/">WebHooks</a> lately and I’m very intrigued.  It’s a simple idea, basically just an event call over http.  It’s a push model.  You register a url with another application, and when something happens in that application, it does an HTTP post with the information.  So, the idea is simple to grasp but it can do some powerful things.  For example, this WordPress blog has a way to register url’s to call when a new post is added.  I can create a page for it to post to, and then have an e-mail sent to me, post notifications to my favorite social network, or whatever you can dream up.  We aren’t limited to notification either, we can also create composite calls that act on the data sent to it, same idea as XML-RPC.</p>

<p>I came across <a href="http://www.postbin.org/">PostBin</a> which is a WebHook debugger.  You can create a bin and have you application do an HTTP POST to it, and it will store the headers and body data for you.  It has it’s limitations, like being throttled by Google Apps for both data size and bandwidth, it only worked for me about half the time.  I decided to create a <a href="http://www.postbin.org/">PostBin</a> type application for my own purposes.  The functionality is the same as <a href="http://www.postbin.org/">PostBin</a> but instead of having to manually create the bins, mine are automatically created by posting to the url.  Since it’s not a full fledge application, it doesn’t have the security or data limitations.  I’ll put that in for later versions if it gets overused and abused.</p>

<p>Sample application is available at <a href="http://apps.iamggreen.com/postbin">http://apps.iamggreen.com/postbin</a></p>

<p>Source code is available at <a href="https://github.com/iamggreen/PostBinDebugger">https://github.com/iamggreen/PostBinDebugger</a></p>
]]></content>
  </entry>
  
</feed>
