<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | iamggreen's Blog]]></title>
  <link href="http://www.iamggreen.com/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://www.iamggreen.com/"/>
  <updated>2014-01-19T13:00:17-06:00</updated>
  <id>http://www.iamggreen.com/</id>
  <author>
    <name><![CDATA[Gary Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OWASP Top 10 for 2013]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/19/owasp-top-10-for-2013/"/>
    <updated>2014-01-19T08:37:48-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/19/owasp-top-10-for-2013</id>
    <content type="html"><![CDATA[<p>OWASP is the Open Web Application Security Project.  The OWASP Top Ten project contains the top 10 security vulnerabilities for web applications.  Every year they publish this list.  Below is the top 10 vulnerabilities of 2013.</p>

<ol>
<li><p><strong>Injection</strong></p>

<p>This is any kind of untrusted data sent to a web application without validation.  SQL Injection is a big one but also consider script injection.  To protect against this use bind variables for SQL and avoid dynamic SQL statements.  Also, validate all data coming from user forms/requests.  Script injection is harmful particularly is it is data coming from the user and being displayed to other&rsquo;s on the browser.  If not properly escaped it can contain scripts that do malicious activities.</p>

<hr /></li>
<li><p><strong>Broken Authentication and Session Management</strong></p>

<p>Building custom authentication and session management is hard.  Doing it wrong could leave your application open to allowing intruders access to accounts and user information.  The recommendation is to use tried and true methods and shy away from custom techniques.</p>

<hr /></li>
<li><p><strong>Cross-Site Scripting (XSS)</strong></p>

<p>XSS and Injection go hand in hand.  This is the most prevalent web application security flaw.  XSS occurs when an application includes user supplied data in a page sent to the browser without properly validating or escaping that content.  The types of XSS flaws are 1) Stored, 2) Reflected, and 3) DOM based XSS</p>

<hr /></li>
<li><p><strong>Insecure Direct Object References</strong></p>

<p>This type of flaw occurs when a user, usually an authorized system user, changes a parameter that directly refers to a system object to another object the user isn&rsquo;t authorized for.  The application assumes that since the user is authorized they are not also an attacker.  The best way to prevent this is to check access on a per object bases, or use per user or session indirect object references.</p>

<hr /></li>
<li><p><strong>Security Misconfiguration</strong></p>

<p>This can happen at any level of an application stack including this platform, web server, application server, database, and custom code.  Having an automated repeatable hardening process for servers can help with server misconfiguration.  Also, keep up to date with software updates and patches and run scans and audits periodically.  Also, have a strong application architecture that provides effective, secure separate between components.</p>

<hr /></li>
<li><p><strong>Sensitive Data Exposure</strong></p>

<p>This happens when an attacker accesses sensitive data at rest, in transit, or in customer browsers.  Usually the result of not encrypting sensitive data.  Also can happen due to choosing weak key generation, management, or algorithm techniques.</p>

<hr /></li>
<li><p><strong>Missing Function Level Access Control</strong></p>

<p>This is the result of not authenticating users and not protecting privileged data.  Sometimes developers try to leverage security by obscurity and believe that if there are no direct links to a page, they do not need to secure them.</p>

<hr /></li>
<li><p><strong>Cross-Site Request Forgery (CSRF)</strong></p>

<p>This happens when an attacker creates a forged HTTP request and tricks a victim into submitting them via image tags, XSS, or numerous other techniques.  If the user is authenticated the attack will succeed.  This attack takes advantage of the predictable nature of an http action&rsquo;s parameters and the fact that a browser sends cookie credentials automatically with a  request.  To prevent a CSRF, it requires the inclusion of an unpredictable token in each HTTP request.  This should be unique per session at a minimum.  This token can be included as a hidden field in the page.</p>

<hr /></li>
<li><p><strong>Using Components with Known Vulnerabilities</strong></p>

<p>This happens when vulnerable components are used and exploited. The vulnerability could be new or it could be old and the components/libraries used are simply not up to date. To protect against this, identify all components used along with versions, monitor the security of these components publicly.  Also, establish security policies governing these components uses and consider adding security wrappers around the components.</p>

<hr /></li>
<li><p><strong>Unvalidated Redirects and Forwards</strong></p></li>
</ol>


<p>   This type of attack happens with an attacker tricks a user into submitting a request to your website.  The attacker links to invalidated redirects and tricks the victim into clicking it.  Since the link is to a trusted domain the user is more likely to trust the page they are being redirected to.  This could be the attacker&rsquo;s page asking for credentials from your site.  To prevent this type of attack, either do not use redirects and forwards or do not involve user parameters in determining the destination.  At a minimum ensure the supplied url parameter is valid and authorized for the user, preferably using a mapping value rather than a url.</p>

<hr />

<p> <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP Top Ten Project</a></p>
]]></content>
  </entry>
  
</feed>
