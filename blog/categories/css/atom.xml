<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Css | iamggreen's Blog]]></title>
  <link href="http://www.iamggreen.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://www.iamggreen.com/"/>
  <updated>2014-01-20T17:13:14-06:00</updated>
  <id>http://www.iamggreen.com/</id>
  <author>
    <name><![CDATA[Gary Green]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS Transitions]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/20/css-transitions/"/>
    <updated>2014-01-20T17:03:17-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/20/css-transitions</id>
    <content type="html"><![CDATA[<p>The CSS transition property allows the browser to listen to CSS property changes and instead of applying the change immediately, it animates(or transitions) the given property from the beginning state to the new state.  Like the animation property, this requires vendor prefixes and works with the most up to date browsers, including IE10+.</p>

<p>For the transition to work, you specify a css property for the browser to listen to.  Whenever that css property changes, the browser will apply the given transition.  An example of a transition property is below (Vendor prefixes have been removed for brevity):</p>

<p>```</p>

<h1>ball {</h1>

<pre><code>transition-property: left, top;
transition-duration: 1s, 1s;
transition-timing-function: ease-in, ease-in;
transition-delay: 0, 0;
</code></pre>

<p>}
```</p>

<p>This can also be written shorthand as follows</p>

<p>```</p>

<h1>ball {</h1>

<pre><code>transition: left 1s ease-in 0, top 1s ease-in 0
</code></pre>

<p>}
```</p>

<p>The properties required for transition are as follows:</p>

<ul>
<li><strong>transition-property</strong> &ndash; Specifies the name of the CSS property to transition</li>
</ul>


<hr />

<ul>
<li><strong>transition-duration</strong> &ndash; Specifies the name of the CSS property to transition</li>
</ul>


<hr />

<ul>
<li><strong>transition-timing-function</strong> &ndash; Specifies the speed curve of the animation

<ul>
<li>Allowed values are ease(default), linear, ease-in, ease-out, ease-in-out, cubic-bezier</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><strong>transition-delay</strong> &ndash; Specifies a delay before the animation will start</li>
</ul>


<hr />

<p>The shorthand version is:</p>

<p><code>
transition: transition transition-duration transition-timing-function transition-delay
</code></p>

<p>See <a href="http://jsfiddle.net/iamggreen/UAyU6/1">My JSFiddle for an example.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyframe Animations]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/18/keyframe-animations/"/>
    <updated>2014-01-18T11:27:15-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/18/keyframe-animations</id>
    <content type="html"><![CDATA[<p>CSS3 defines a property called keyframes in order to allow animation to be done via CSS.  While this works in most up-to-date browsers (Chrome, IE9+, Mozilla, Opera) they all require vendor prefixes to work as the standard properties do not currently work on any browser.  All animation properties as well as the @keyframe declaration must have a vendor prefix to work.  The vendor prefixes have been left of in this article for brevity.</p>

<p>To start, we need to create a keyframe animation.  It looks something like this.</p>

<p>```
@keyframes sunrise {</p>

<pre><code>    0% {
            bottom: 0;
            left: 340px;
            background: #f00;
    }

    33% {
            bottom: 340px;
            left: 340px;
            background: #ffd630;
    }

    66% {
            bottom: 340px;
            left: 40px;
            background: #ffd630;
    }

    100% {
            bottom: 0;
            left: 40px;
            background: #f00;
    }
</code></pre>

<p>}
```</p>

<p>This is pretty self explanatory.  It creates an animation named &ldquo;sunrise&rdquo;.  The percentages define where the transitions need to be at the time interval for that percent.  0% and 100% are where the transition starts and ends. Also, to/from property names can be used interchangeably with 0%/100%, respectively.</p>

<p>Now we need to assign that keyframe animation to a given element of set of elements based on a css selector.  It looks like this.</p>

<p>```</p>

<h1>sun.animate {</h1>

<pre><code>    animation-name: sunrise;
    animation-duration: 10s;
    animation-timing-function: ease;
    animation-iteration-count: 1;
    animation-direction: normal;
    animation-delay: 0;
    animation-play-state: running;
    animation-fill-mode: forwards;
</code></pre>

<p>}
```</p>

<p>The properties are:</p>

<ul>
<li><strong>animation-name</strong>  &ndash; Specifies the name of the keyframe you want to bind to the selector</li>
</ul>


<hr />

<ul>
<li><strong>animation-duration</strong> &ndash; Specifies how many seconds or milliseconds an animation takes to complete</li>
</ul>


<hr />

<ul>
<li><strong>animation-timing-function</strong> &ndash; Specifies the speed curve of the animation

<ul>
<li>Allowed values are ease(default), linear, ease-in, ease-out, ease-in-out, cubic-bezier(Dont ask, no clue?!?!)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><strong>animation-iteration-count</strong> &ndash; Specifies how many times an animation should be played</li>
</ul>


<hr />

<ul>
<li><strong>animation-direction</strong> Specifies whether or not the animation should play in reverse on alternate cycles

<ul>
<li>Allowed values are normal(default), reverse, alternate, alternate-reverse</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><strong>animation-delay</strong> &ndash; Specifies a delay before the animation will start</li>
</ul>


<hr />

<ul>
<li><strong>animation-play-state</strong> Specifies whether the animation is running or paused

<ul>
<li>Allowed values are running(default), paused</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><strong>animation-fill-mode</strong> Specifies what values are applied by the animation outside the time it is executing

<ul>
<li>Allowed values are none(default), forwards, backwards, both</li>
</ul>
</li>
</ul>


<hr />

<p>The shorthand version for the animation property is:</p>

<p><code>
animation: animation-name animation-duration animation-timing-function animation-delay animation-play-state animation-fill-direction;
</code></p>

<p>And that&rsquo;s most of what you need to start playing with animations in CSS.  Some of the pages I put together for my learning are below.  Have fun!</p>

<p><a href="https://github.com/iamggreen/KeyFramesHelloWorld">KeyFrameHelloWorld on GitHub</a></p>

<p><a href="http://jsfiddle.net/iamggreen/e7YPB/1/">Keyframe Orbits JSFiddle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Declaration Precedence]]></title>
    <link href="http://www.iamggreen.com/blog/2014/01/15/css-stylesheet-precedence/"/>
    <updated>2014-01-15T21:48:54-06:00</updated>
    <id>http://www.iamggreen.com/blog/2014/01/15/css-stylesheet-precedence</id>
    <content type="html"><![CDATA[<p>The W3 Specifications on CSS 2.1 say what the CSS Declaration Precedence order but I found it harder to track down what each type of declaration actually is.  This is the definitions in order.</p>

<p><strong>CSS Declaration Precedence Order </strong> (#5 has the highest precedence)</p>

<ol>
<li><p><strong>User Agent Declarations</strong></p>

<p>These are the default declarations added by the browser</p></li>
<li><p><strong>User Normal Declarations</strong></p>

<p>These are the declarations specified by the user in the browser that override the user agent declarations.  Usually in the browser settings/options tabs.</p></li>
<li><p><strong>Author Normal Declarations</strong></p>

<p>These are declarations used by a particular web page.</p></li>
<li><p><strong>Author Important Declarations</strong>
Same as Author Normal declarations but with !important added</p></li>
<li><p><strong>User Important Declarations</strong>
Same as User Normal declarations but with !important added</p></li>
</ol>


<p>References</p>

<p><a href="http://webdesign.about.com/od/css/f/blcssfaqdifusau.htm">What is the difference between a user and an author style sheet?</a></p>

<p><a href="http://www.w3.org/TR/CSS21/cascade.html#cascading-order">CSS Cascading order</a></p>
]]></content>
  </entry>
  
</feed>
